AWSTemplateFormatVersion: "2010-09-09"
Description: A template for photo album app
Resources:
  S3Website:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - DELETE
              - POST
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Access-Control-Allow-Origin
      BucketName: photo-search-website
      WebsiteConfiguration:
        IndexDocument: index.html

  WebsitebucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ai-photo-search-website
      PolicyDocument: {
        "Version": "2012-10-17",
        "Id": "PolicyID",
        "Statement": [
        {
            "Sid": "StmtID",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:*",
            "Resource": "arn:aws:s3:::ai-photo-search-website/*"
        }
      ]
    }

  S3StorePhotos:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Access-Control-Allow-Origin
      BucketName: lixuanphotobucket

  PhotobucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: lixuanphotobucket
      PolicyDocument: {
        "Version": "2012-10-17",
        "Id": "PolicyID",
        "Statement": [
        {
            "Sid": "StmtID",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:*",
            "Resource": "arn:aws:s3:::lixuanphotobucket/*"
        }
      ]
    }

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PhotoSearch
      Description: AI Photo Search application, built during the Cloud and Big Data course
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        host: "ogf3fvxno2.execute-api.us-east-1.amazonaws.com"
        basePath: "/v1stage"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          /upload/{folder}/{item}:
            put:
              produces:
              - "application/json"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "item"
                in: "path"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              - name: "folder"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Photo"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "folder"
                in: "path"
                required: true
                type: "string"
              - name: "item"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Photo"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
  IamRolelf0CF:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "lf0CF-role"  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
            - "apigateway.amazonaws.com"
          Action: "sts:AssumeRole"

  lf0CF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
          S3Bucket: lambda-photo-bk
          S3Key: "Archive.zip"
      FunctionName: func0
      Handler: func0.lambda_handler
      Role: !GetAtt IamRolelf0CF.Arn
      Runtime: python3.9

  IamRolelf1CF:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "lf1CF-role"  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
            - "s3.amazonaws.com"
            - "opensearchservice.amazonaws.com"
            - "rekognition.amazonaws.com"
          Action: "sts:AssumeRole"

  lf1CF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
          S3Bucket: lambda-photo-bk
          S3Key: "Archive.zip"
      FunctionName: func1
      Handler: func1.lambda_handler
      Role: !GetAtt IamRolelf1CF.Arn
      Runtime: python3.9

  IamRolelf2CF:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "lf2CF-role"  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
            - "apigateway.amazonaws.com"
            - "opensearchservice.amazonaws.com"
            - "lexv2.amazonaws.com"
          Action: "sts:AssumeRole"

  lf2CF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
          S3Bucket: lambda-photo-bk
          S3Key: "Archive.zip"
      FunctionName: func2
      Handler: func2.lambda_handler
      Role: !GetAtt IamRolelf2CF.Arn
      Runtime: python3.9

  ElasticSearch:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: storephotos
      ClusterConfig:
        InstanceCount: 1
        InstanceType: t3.small.search
      EBSOptions:
        EBSEnabled: true
        Iops: 3000
        Throughput: 125
        VolumeSize: 10
        VolumeType: gp3
